{% comment %}
  Dual Shade Product Showcase
  Interactive split-screen product comparison with draggable slider
{% endcomment %}

{%- liquid
    assign section_id = section.id
    assign left_image = section.settings.left_product_image
    assign right_image = section.settings.right_product_image
    assign left_name = section.settings.left_shade_name
    assign right_name = section.settings.right_shade_name
  -%}
  
  <section class="dual-shade-showcase" id="dual-shade-{{ section_id }}">
    <div class="ds-container">
      <h2 class="ds-title">{{ section.settings.section_title }}</h2>
      <p class="ds-subtitle">{{ section.settings.section_subtitle }}</p>
      
      <div class="ds-comparison" id="comparison-{{ section_id }}">
        <!-- Left Product -->
        <div class="ds-product ds-product--left" id="left-product-{{ section_id }}">
          {% if left_image %}
            <img 
              src="{{ left_image | image_url: width: 1600 }}" 
              alt="{{ left_image.alt | default: left_name }}"
              class="ds-product__image"
              loading="lazy"
            >
          {% else %}
            <div class="ds-product__placeholder">
              <div class="ds-placeholder-content">
                <svg width="80" height="80" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <rect x="3" y="3" width="18" height="18" rx="2" ry="2"></rect>
                  <circle cx="8.5" cy="8.5" r="1.5"></circle>
                  <polyline points="21 15 16 10 5 21"></polyline>
                </svg>
                <span>{{ left_name }}</span>
              </div>
            </div>
          {% endif %}
          
          <div class="ds-product__label" id="left-label-{{ section_id }}">
            <span>{{ left_name }}</span>
          </div>
        </div>
        
        <!-- Right Product -->
        <div class="ds-product ds-product--right" id="right-product-{{ section_id }}">
          {% if right_image %}
            <img 
              src="{{ right_image | image_url: width: 1600 }}" 
              alt="{{ right_image.alt | default: right_name }}"
              class="ds-product__image"
              loading="lazy"
            >
          {% else %}
            <div class="ds-product__placeholder ds-product__placeholder--alt">
              <div class="ds-placeholder-content">
                <svg width="80" height="80" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <rect x="3" y="3" width="18" height="18" rx="2" ry="2"></rect>
                  <circle cx="8.5" cy="8.5" r="1.5"></circle>
                  <polyline points="21 15 16 10 5 21"></polyline>
                </svg>
                <span>{{ right_name }}</span>
              </div>
            </div>
          {% endif %}
          
          <div class="ds-product__label" id="right-label-{{ section_id }}">
            <span>{{ right_name }}</span>
          </div>
        </div>
        
        <!-- Slider Control -->
        <div class="ds-slider" id="slider-{{ section_id }}">
          <div class="ds-slider__track"></div>
          <div class="ds-slider__handle">
            <div class="ds-handle-3d">
              <div class="ds-handle-3d__face ds-handle-3d__face--front">
                <svg width="24" height="24" viewBox="0 0 24 24" fill="none">
                  <path d="M9 12H3M15 12H21" stroke="currentColor" stroke-width="2.5" stroke-linecap="round"/>
                  <circle cx="12" cy="12" r="3" fill="currentColor"/>
                </svg>
              </div>
              <div class="ds-handle-3d__face ds-handle-3d__face--back"></div>
              <div class="ds-handle-3d__face ds-handle-3d__face--left"></div>
              <div class="ds-handle-3d__face ds-handle-3d__face--right"></div>
              <div class="ds-handle-3d__face ds-handle-3d__face--top"></div>
              <div class="ds-handle-3d__face ds-handle-3d__face--bottom"></div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </section>
  
  <style>
  .dual-shade-showcase {
    padding: 32px 0;
    background: #f8f9fa;
    overflow: hidden;
  }
  
  .ds-container {
    max-width: 1400px;
    margin: 0 auto;
    padding: 0 16px;
  }
  
  .ds-title {
    font-size: clamp(2rem, 5vw, 3.5rem);
    font-weight: 700;
    text-align: center;
    margin-bottom: 8px;
    color: #1a1a1a;
    letter-spacing: -0.02em;
  }
  
  .ds-subtitle {
    font-size: 1.125rem;
    text-align: center;
    color: #666;
    margin-bottom: 32px;
    font-weight: 400;
    opacity: 0.8;
  }
  
  .ds-comparison {
    position: relative;
    width: 100%;
    aspect-ratio: 16/10;
    min-height: 400px;
    max-height: 80vh;
    border-radius: 16px;
    overflow: hidden;
    box-shadow: 
      0 4px 6px -1px rgba(0, 0, 0, 0.1),
      0 2px 4px -1px rgba(0, 0, 0, 0.06),
      0 20px 25px -5px rgba(0, 0, 0, 0.1),
      0 10px 10px -5px rgba(0, 0, 0, 0.04);
    background: #000;
    cursor: grab;
    transform: translateZ(0);
    will-change: transform;
  }
  
  .ds-comparison:active {
    cursor: grabbing;
  }
  
  /* Products */
  .ds-product {
    position: absolute;
    top: 0;
    width: 100%;
    height: 100%;
    overflow: hidden;
    transform: translateZ(0);
    will-change: clip-path;
  }
  
  .ds-product--left {
    left: 0;
    clip-path: polygon(0 0, 50% 0, 50% 100%, 0 100%);
  }
  
  .ds-product--right {
    right: 0;
    clip-path: polygon(50% 0, 100% 0, 100% 100%, 50% 100%);
  }
  
  .ds-product__image {
    width: 100%;
    height: 100%;
    object-fit: cover;
    display: block;
    transform: scale(1.01);
  }
  
  .ds-product__placeholder {
    width: 100%;
    height: 100%;
    background: linear-gradient(135deg, #f0f0f0 0%, #e0e0e0 100%);
    display: flex;
    align-items: center;
    justify-content: center;
  }
  
  .ds-product__placeholder--alt {
    background: linear-gradient(135deg, #e8e8e8 0%, #d8d8d8 100%);
  }
  
  .ds-placeholder-content {
    text-align: center;
    color: #999;
  }
  
  .ds-placeholder-content svg {
    margin-bottom: 16px;
    opacity: 0.5;
  }
  
  .ds-placeholder-content span {
    display: block;
    font-size: 18px;
    font-weight: 500;
  }
  
  /* Labels */
  .ds-product__label {
    position: absolute;
    bottom: 24px;
    left: 50%;
    transform: translateX(-50%) translateY(20px);
    opacity: 0;
    transition: all 0.6s cubic-bezier(0.34, 1.56, 0.64, 1);
    will-change: transform, opacity;
  }
  
  .ds-product--left .ds-product__label {
    left: 25%;
  }
  
  .ds-product--right .ds-product__label {
    left: 75%;
  }
  
  .ds-comparison.show-labels .ds-product__label {
    opacity: 1;
    transform: translateX(-50%) translateY(0);
  }
  
  .ds-product__label span {
    display: inline-block;
    padding: 10px 24px;
    background: rgba(255, 255, 255, 0.95);
    backdrop-filter: blur(20px) saturate(180%);
    -webkit-backdrop-filter: blur(20px) saturate(180%);
    border-radius: 100px;
    font-weight: 600;
    font-size: 0.9375rem;
    color: #1a1a1a;
    box-shadow: 
      0 4px 6px -1px rgba(0, 0, 0, 0.1),
      0 2px 4px -1px rgba(0, 0, 0, 0.06),
      0 8px 16px -4px rgba(0, 0, 0, 0.1);
    white-space: nowrap;
  }
  
  /* Slider */
  .ds-slider {
    position: absolute;
    top: 0;
    left: 50%;
    width: 60px;
    height: 100%;
    transform: translateX(-50%);
    pointer-events: none;
    opacity: 0;
    transition: opacity 0.8s cubic-bezier(0.34, 1.56, 0.64, 1);
  }
  
  .ds-comparison.slider-active .ds-slider {
    opacity: 1;
  }
  
  .ds-slider__track {
    position: absolute;
    left: 50%;
    top: 0;
    width: 8px;
    height: 100%;
    background: linear-gradient(180deg, 
      rgba(255, 255, 255, 0.9) 0%, 
      rgba(255, 255, 255, 0.95) 50%, 
      rgba(255, 255, 255, 0.9) 100%
    );
    transform: translateX(-50%);
    box-shadow: 
      0 0 20px rgba(255, 255, 255, 0.6),
      0 0 40px rgba(255, 255, 255, 0.3),
      0 0 60px rgba(0, 0, 0, 0.2);
    backdrop-filter: blur(10px) saturate(150%);
    -webkit-backdrop-filter: blur(10px) saturate(150%);
    pointer-events: none;
  }
  
  .ds-slider__handle {
    position: absolute;
    left: 50%;
    top: 50%;
    width: 48px;
    height: 48px;
    transform: translate(-50%, -50%);
    pointer-events: auto;
    cursor: grab;
    transition: transform 0.3s cubic-bezier(0.34, 1.56, 0.64, 1);
    transform-style: preserve-3d;
    perspective: 1000px;
    z-index: 10;
  }
  
  .ds-slider__handle:hover {
    transform: translate(-50%, -50%) scale(1.1);
  }
  
  .ds-slider__handle:hover .ds-handle-3d {
    transform: rotateY(10deg) rotateX(-5deg);
  }
  
  .ds-slider__handle:active {
    transform: translate(-50%, -50%) scale(0.95);
    cursor: grabbing;
  }
  
  .ds-slider__handle:active .ds-handle-3d {
    transform: rotateY(0deg) rotateX(0deg) scale(0.98);
  }
  
  /* 3D Handle */
  .ds-handle-3d {
    width: 100%;
    height: 100%;
    position: relative;
    transform-style: preserve-3d;
    transition: transform 0.3s cubic-bezier(0.34, 1.56, 0.64, 1);
    transform: rotateY(0deg) rotateX(0deg);
  }
  
  .ds-handle-3d__face {
    position: absolute;
    width: 48px;
    height: 48px;
    border-radius: 50%;
    background: linear-gradient(145deg, #ffffff, #f0f0f0);
    box-shadow: 
      inset 2px 2px 4px rgba(255, 255, 255, 0.9),
      inset -2px -2px 4px rgba(0, 0, 0, 0.1);
  }
  
  .ds-handle-3d__face--front {
    transform: translateZ(24px);
    background: linear-gradient(145deg, #ffffff, #f8f8f8);
    display: flex;
    align-items: center;
    justify-content: center;
    color: #1a1a1a;
    box-shadow: 
      0 4px 8px -2px rgba(0, 0, 0, 0.1),
      0 8px 16px -4px rgba(0, 0, 0, 0.15),
      0 16px 32px -8px rgba(0, 0, 0, 0.2),
      inset 0 1px 2px rgba(255, 255, 255, 0.9);
  }
  
  .ds-handle-3d__face--back {
    transform: rotateY(180deg) translateZ(24px);
    background: linear-gradient(145deg, #e0e0e0, #d0d0d0);
  }
  
  .ds-handle-3d__face--left {
    transform: rotateY(-90deg) translateZ(24px);
    background: linear-gradient(145deg, #f0f0f0, #e0e0e0);
  }
  
  .ds-handle-3d__face--right {
    transform: rotateY(90deg) translateZ(24px);
    background: linear-gradient(145deg, #f0f0f0, #e0e0e0);
  }
  
  .ds-handle-3d__face--top {
    transform: rotateX(90deg) translateZ(24px);
    background: linear-gradient(145deg, #ffffff, #f0f0f0);
  }
  
  .ds-handle-3d__face--bottom {
    transform: rotateX(-90deg) translateZ(24px);
    background: linear-gradient(145deg, #e0e0e0, #d0d0d0);
  }
  
  /* Responsive */
  @media (max-width: 768px) {
    .dual-shade-showcase {
      padding: 24px 0;
    }
    
    .ds-container {
      padding: 0 12px;
    }
    
    .ds-comparison {
      aspect-ratio: 4/3;
      min-height: 320px;
      border-radius: 12px;
    }
    
    .ds-slider__track {
      width: 6px;
    }
    
    .ds-slider__handle {
      width: 40px;
      height: 40px;
    }
    
    .ds-handle-3d__face {
      width: 40px;
      height: 40px;
    }
    
    .ds-handle-3d__face--front { transform: translateZ(20px); }
    .ds-handle-3d__face--back { transform: rotateY(180deg) translateZ(20px); }
    .ds-handle-3d__face--left { transform: rotateY(-90deg) translateZ(20px); }
    .ds-handle-3d__face--right { transform: rotateY(90deg) translateZ(20px); }
    .ds-handle-3d__face--top { transform: rotateX(90deg) translateZ(20px); }
    .ds-handle-3d__face--bottom { transform: rotateX(-90deg) translateZ(20px); }
    
    .ds-product__label {
      bottom: 20px;
    }
    
    .ds-product__label span {
      padding: 8px 20px;
      font-size: 0.875rem;
    }
  }
  
  @media (max-width: 480px) {
    .dual-shade-showcase {
      padding: 16px 0;
    }
    
    .ds-container {
      padding: 0;
    }
    
    .ds-title {
      margin-bottom: 4px;
      padding: 0 16px;
    }
    
    .ds-subtitle {
      font-size: 1rem;
      margin-bottom: 20px;
      padding: 0 16px;
    }
    
    .ds-comparison {
      border-radius: 0;
    }
    
    .ds-slider__track {
      width: 5px;
    }
    
    .ds-slider__handle {
      width: 36px;
      height: 36px;
    }
    
    .ds-handle-3d__face {
      width: 36px;
      height: 36px;
    }
    
    .ds-handle-3d__face--front svg {
      width: 20px;
      height: 20px;
    }
  }
  
  /* Animation */
  @keyframes slideDown {
    0% {
      transform: translate(-50%, calc(-50% - 200px)) scale(0.5);
      opacity: 0;
    }
    50% {
      transform: translate(-50%, calc(-50% + 20px)) scale(1.1);
      opacity: 1;
    }
    100% {
      transform: translate(-50%, -50%) scale(1);
      opacity: 1;
    }
  }
  
  @keyframes trackGlow {
    0% {
      box-shadow: 
        0 0 20px rgba(255, 255, 255, 0.6),
        0 0 40px rgba(255, 255, 255, 0.3),
        0 0 60px rgba(0, 0, 0, 0.2);
    }
    50% {
      box-shadow: 
        0 0 30px rgba(255, 255, 255, 0.8),
        0 0 60px rgba(255, 255, 255, 0.4),
        0 0 80px rgba(0, 0, 0, 0.3);
    }
    100% {
      box-shadow: 
        0 0 20px rgba(255, 255, 255, 0.6),
        0 0 40px rgba(255, 255, 255, 0.3),
        0 0 60px rgba(0, 0, 0, 0.2);
    }
  }
  
  .ds-comparison.animate .ds-slider__track {
    animation: trackGlow 3s ease-in-out infinite;
  }
  
  .ds-comparison.animate .ds-slider__handle {
    animation: slideDown 1.2s cubic-bezier(0.34, 1.56, 0.64, 1) 0.3s forwards;
  }
  
  .ds-comparison.animate .ds-handle-3d {
    animation: handleRotate 2s ease-out 1.5s;
  }
  
  @keyframes handleRotate {
    0% { transform: rotateY(0deg); }
    50% { transform: rotateY(180deg); }
    100% { transform: rotateY(360deg); }
  }
  </style>
  
  <script>
  (function() {
    const sectionId = '{{ section_id }}';
    const comparison = document.getElementById(`comparison-${sectionId}`);
    const slider = document.getElementById(`slider-${sectionId}`);
    const leftProduct = document.getElementById(`left-product-${sectionId}`);
    const rightProduct = document.getElementById(`right-product-${sectionId}`);
    const leftLabel = document.getElementById(`left-label-${sectionId}`);
    const rightLabel = document.getElementById(`right-label-${sectionId}`);
    
    if (!comparison || !slider) return;
    
    let isDragging = false;
    let currentPosition = 50;
    let targetPosition = 50;
    let animationFrame = null;
    
    // Smooth animation parameters
    const SMOOTHING = 0.15; // Lower = smoother
    const THRESHOLD = 0.01;
    
    // Initialize
    function init() {
      // Setup intersection observer
      const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            setTimeout(() => {
              comparison.classList.add('slider-active', 'show-labels', 'animate');
              startSmoothAnimation();
            }, 100);
            observer.disconnect();
          }
        });
      }, { threshold: 0.2 });
      
      observer.observe(comparison);
      
      // Setup drag handlers
      setupDragHandlers();
      
      // Initial position
      updatePosition(50, true);
    }
    
    function setupDragHandlers() {
      // Mouse events - add to both slider handle and the entire comparison area
      const sliderHandle = slider.querySelector('.ds-slider__handle');
      
      // Handle drag
      sliderHandle.addEventListener('mousedown', startDrag);
      
      // Also allow clicking anywhere on comparison to move slider
      comparison.addEventListener('mousedown', function(e) {
        // Check if clicking on the handle itself
        if (e.target.closest('.ds-slider__handle')) return;
        
        // Move slider to click position
        const rect = comparison.getBoundingClientRect();
        const relativeX = e.clientX - rect.left;
        targetPosition = (relativeX / rect.width) * 100;
        targetPosition = Math.max(0, Math.min(100, targetPosition));
        
        // Start dragging
        startDrag(e);
      });
      
      document.addEventListener('mousemove', drag);
      document.addEventListener('mouseup', stopDrag);
      
      // Touch events
      sliderHandle.addEventListener('touchstart', startDrag, { passive: true });
      comparison.addEventListener('touchstart', function(e) {
        if (e.target.closest('.ds-slider__handle')) return;
        
        const rect = comparison.getBoundingClientRect();
        const relativeX = e.touches[0].clientX - rect.left;
        targetPosition = (relativeX / rect.width) * 100;
        targetPosition = Math.max(0, Math.min(100, targetPosition));
        
        startDrag(e);
      }, { passive: true });
      
      document.addEventListener('touchmove', drag, { passive: false });
      document.addEventListener('touchend', stopDrag);
      
      // Prevent text selection
      comparison.addEventListener('selectstart', e => {
        if (isDragging) e.preventDefault();
      });
    }
    
    function startDrag(e) {
      isDragging = true;
      comparison.style.cursor = 'grabbing';
      
      // Get initial position
      const rect = comparison.getBoundingClientRect();
      const x = e.type.includes('touch') ? e.touches[0].clientX : e.clientX;
      const relativeX = x - rect.left;
      
      targetPosition = (relativeX / rect.width) * 100;
      targetPosition = Math.max(0, Math.min(100, targetPosition));
    }
    
    function drag(e) {
      if (!isDragging) return;
      e.preventDefault();
      
      const rect = comparison.getBoundingClientRect();
      const x = e.type.includes('touch') ? e.touches[0].clientX : e.clientX;
      const relativeX = x - rect.left;
      
      targetPosition = (relativeX / rect.width) * 100;
      targetPosition = Math.max(0, Math.min(100, targetPosition));
    }
    
    function stopDrag() {
      isDragging = false;
      comparison.style.cursor = 'grab';
    }
    
    function startSmoothAnimation() {
      if (animationFrame) return;
      
      function animate() {
        const diff = targetPosition - currentPosition;
        
        if (Math.abs(diff) > THRESHOLD) {
          currentPosition += diff * SMOOTHING;
          updatePosition(currentPosition);
          animationFrame = requestAnimationFrame(animate);
        } else {
          currentPosition = targetPosition;
          updatePosition(currentPosition);
          animationFrame = null;
        }
      }
      
      animate();
    }
    
    function updatePosition(position, instant = false) {
      // Smooth clip-path transitions
      const easedPosition = instant ? position : position;
      
      // Update clip paths
      leftProduct.style.clipPath = `polygon(0 0, ${easedPosition}% 0, ${easedPosition}% 100%, 0 100%)`;
      rightProduct.style.clipPath = `polygon(${easedPosition}% 0, 100% 0, 100% 100%, ${easedPosition}% 100%)`;
      
      // Update slider position - direct positioning instead of transform
      slider.style.left = `${easedPosition}%`;
      
      // Update labels with dynamic positioning
      if (leftLabel) {
        const leftLabelPos = easedPosition < 25 ? easedPosition / 2 : 25;
        leftLabel.style.left = `${leftLabelPos}%`;
        leftLabel.style.opacity = easedPosition < 15 ? '0' : '1';
        leftLabel.style.transform = `translateX(-50%) translateY(${easedPosition < 15 ? '20px' : '0'})`;
      }
      
      if (rightLabel) {
        const rightLabelPos = easedPosition > 75 ? 50 + (easedPosition / 2) : 75;
        rightLabel.style.left = `${rightLabelPos}%`;
        rightLabel.style.opacity = easedPosition > 85 ? '0' : '1';
        rightLabel.style.transform = `translateX(-50%) translateY(${easedPosition > 85 ? '20px' : '0'})`;
      }
    }
    
    // Start animation loop
    function tick() {
      startSmoothAnimation();
      requestAnimationFrame(tick);
    }
    
    // Initialize on DOM ready
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', () => {
        init();
        tick();
      });
    } else {
      init();
      tick();
    }
  })();
  </script>
  
  {% schema %}
  {
    "name": "Dual Shade Showcase",
    "tag": "section",
    "class": "section-dual-shade",
    "settings": [
      {
        "type": "header",
        "content": "Section Content"
      },
      {
        "type": "text",
        "id": "section_title",
        "label": "Section Title",
        "default": "Choose Your Style"
      },
      {
        "type": "text",
        "id": "section_subtitle",
        "label": "Section Subtitle",
        "default": "Slide to compare our premium finishes"
      },
      {
        "type": "header",
        "content": "Products"
      },
      {
        "type": "image_picker",
        "id": "left_product_image",
        "label": "Left Product Image",
        "info": "Recommended: 1600x1000px or 16:10 aspect ratio"
      },
      {
        "type": "text",
        "id": "left_shade_name",
        "label": "Left Product Name",
        "default": "Classic Gold"
      },
      {
        "type": "image_picker",
        "id": "right_product_image",
        "label": "Right Product Image",
        "info": "Recommended: 1600x1000px or 16:10 aspect ratio"
      },
      {
        "type": "text",
        "id": "right_shade_name",
        "label": "Right Product Name",
        "default": "Bold Crimson"
      }
    ],
    "presets": [
      {
        "name": "Dual Image Slider",
        "settings": {
          "section_title": "Choose Your Style",
          "section_subtitle": "Slide to compare our premium finishes",
          "left_shade_name": "Classic Gold",
          "right_shade_name": "Bold Crimson"
        }
      }
    ]
  }
  {% endschema %}